@page "/"
@page "/recipes"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@rendermode InteractiveServer

<SearchBar OnSearch="@OnSearchTermChanged" />

<div class="grid page-grid @GetRecipesVisibilityCssClass()">

    @if (RecipeState.Value.Items.Count() == 0)
    {
        <p class="no-ingredients-message">@LabelsTranslator.NoRecipesFound</p>
    }

    @foreach (var recipe in RecipeState.Value.Items)
    {
        <Card TContent="IRecipeModel" 
              Item="recipe" 
              ImageSource="@recipe.Image.GetImageSource()" 
              Title="@recipe.Name"
              OnClick="@(() => RedirectToDetails(recipe.Id))" 
              OnSelect="HandleSelection"
              IsSelected="@(RecipeState.Value.SelectedItems.Contains(recipe))"
              EnableSelection= "true">
            <BodyContent>
                <h3 class="card-title">@recipe.Name</h3>
                <div class="recipes-times">
                    <div>
                        <Icon IconName="@MaterialIconsConstants.CookingTime" Title="@LabelsTranslator.RecipeCookingTime" />
                        <span>@recipe.CookingTime</span>
                    </div>
                    <div>
                        <Icon IconName="@MaterialIconsConstants.PreparationTime" Title="@LabelsTranslator.RecipePreparationTime" />
                        <span>@recipe.PreparationTime</span>
                    </div>
                </div>

            </BodyContent>
        </Card>
    }
</div>

<PaginationButtons CanPreviousClick="@CanPreviousClick()" OnPrevious="@OnPreviousAsync" OnNext="@OnNextAsync" />

<Loader IsVisible="@RecipeState.Value.IsLoading" />

<Modal OnClose="CloseRecipeFormModal" IsVisible="@RecipeState.Value.FormModalVisibility">

    <RecipeForm OnCancel="CloseRecipeFormModal" />
</Modal>

<OptionsMenu Options="GetOptions()" />
