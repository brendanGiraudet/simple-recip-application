@inherits FluxorComponent

<div class="ingredients-selector-container">
    <div class="ingredients-selector">

        <button @onclick="OpenIngredientFormModalAsync" type="button" class="btn btn-secondary btn-add-ingredient"
            title="@LabelsTranslator.AddIngredient"><span class="material-symbols-outlined">@MaterialIconsConstants.Add</span></button>

        <div class="ingredient-selector-search-bar">
            <DropdownList OnSearch="@SearchIngredients"
                          Items="RecipeState.Value.FilteredIngredients"
                          TItem="@(IIngredientModel)"
                          OnClick="@((ingredient) => AddIngredient(ingredient))"
                          PropertyNameToDisplay="@(nameof(IIngredientModel.Name))"/>
        </div>
    </div>
    <!-- Tags (Selected Ingredients with Quantity) -->
    <div class="tags">
        @if (RecipeIngredients.Count == 0)
        {
            <span class="badge badge-secondary">@LabelsTranslator.NoIngredientsFound</span>
        }

        @foreach (var ingredient in RecipeIngredients)
        {
            <Tag OnRemoveClick="@(() => RemoveIngredient(ingredient))">
                @* Name *@
                <span class="badge badge-primary">@ingredient.IngredientModel?.Name</span>

                @* Quantity *@
                <div>
                    <InputNumber @bind-Value="ingredient.Quantity" placeholder="@LabelsTranslator.Quantity" min="0.5"
                                 step="0.5" />
                    <ValidationMessage For="@(() => ingredient.Quantity)" />
                </div>

                @* MeasureUnit *@
                <span>@ingredient.IngredientModel?.MeasureUnit</span>
            </Tag>
        }
    </div>
</div>

<Modal OnClose="CloseIngredientModal" IsVisible="IngredientState.Value.IngredientModalVisibility">
    <IngredientForm Ingredient="_selectedIngredient" OnCancel="CloseIngredientModal" />
</Modal>